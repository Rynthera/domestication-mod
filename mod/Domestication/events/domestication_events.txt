############################
#
# Domestication Events
#
# Written by Colleen Arkadija
#
############################

namespace = domestication

## Add Haustoric Implant trait to floret pops - triggered on monthly pulse
country_event = {
	id = domestication.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_implant
		any_owned_pop = {
			has_job = floret
			is_robot_pop = no
			NOT = { has_trait = trait_haustoric_implant }
		}
	}

	immediate = {
		every_owned_planet = {
			limit = {
				any_owned_pop = {
					has_job = floret
					is_robot_pop = no
					NOT = {
						pop_has_trait = trait_haustoric_implant
					}
				}
			}
			random_owned_pop = {
				limit = {
					has_job = floret
					is_robot_pop = no
					has_haustorics = no
				}
				modify_species = {
					species = this
					add_trait = trait_haustoric_implant
					add_traits_at_start_of_list = yes

					effect = {
						set_citizenship_type = {
							country = root
							type = citizenship_limited
							cooldown = no
						}
						set_living_standard = {
							country = root
							type = living_standard_chemical_bliss
							cooldown = no
						}
						set_military_service_type = {
							country = root
							type = military_service_none
							cooldown = no
						}
						set_population_controls = {
							country = root
							type = population_control_yes
							cooldown = no
						}
						set_colonization_controls = {
							country = root
							type = colonization_control_yes
							cooldown = no
						}
					}
				}
			}
		}
	}
}

## Inform player about Haustoric Implant
country_event = {
	id = domestication.2
	title = domestication.2.name
	desc =  domestication.2.desc
	picture = GFX_evt_scientific_experiments
	fire_only_once = yes

	is_triggered_only = yes
	hide_window = no
	show_sound = event_laboratory_sound

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_implant
	}

	option = {
		name = domestication.2.a
		trigger = {
			always = yes
		}
	}
}

## Creation of a Domesticated Protectorate
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.3
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
		}
		this = {
			is_gestalt = no
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_protectorate

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		every_owned_planet = {
			limit = { always = yes }
			planet_event = {
				id = domestication.5
				scopes = { from = event_target:domesticator_overlord }
			}
		}


		copy_ethos_and_authority = from

		change_government = {
			civics = random
			remove_invalid_civics = yes
		}
		while = {
			limit = {
				OR = {
					has_valid_civic = civic_slaver_guilds
					has_valid_civic = civic_warrior_culture
					has_valid_civic = civic_shared_burden
				}
			}
			change_government = {
				civics = random
				remove_invalid_civics = yes
			}
		}

		#force_add_civic = civic_domesticators

		set_name = random
		change_dominant_species = { species = event_target:overlord_species }

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = plantoid

		## Add leaders
		while = {
			count = 4
			create_leader = {
				class = scientist
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 1
			create_leader = {
				class = admiral
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 2
			create_leader = {
				class = governor
				species = this.owner_species
				name = random
				skill = 3
			}
		}

		assign_leader = last_created_leader

		## Remove old leaders
		every_owned_leader = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			kill_leader = {
				fire = yes
			}
		}

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		## Outlaw Slavery and purges
		set_policy = {
			policy = slavery
			option = slavery_not_allowed
			cooldown = yes
		}
		set_policy = {
			policy = purge
			option = purge_not_allowed
			cooldown = yes
		}

		## Set citizenship rights for non-affini in country
		every_owned_species = {
			limit = {
				NOT = { is_same_species = this.owner_species }
				OR = {
					has_citizenship_type = { country = root type = citizenship_full }
					has_citizenship_type = { country = root type = citizenship_slavery }
				}
			}
			set_citizenship_type = {
				country = root
				type = citizenship_limited
				cooldown = yes
			}
		}

		#add_modifier = {
		#	modifier = "protectorate_floret_jobs"
		#	days = -1
		#}

		# initialize floret index
		country_event = {	id = domestication.7 }
	}
}

planet_event = {
	id = domestication.5
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		# if less than 2 affini pops on planet
		count_owned_pop = {
			limit = {
				is_same_species = from.owner_species
			}
			count < 2
		}
	}

	# this/root = planet
	# from = affini compact

	immediate = {
		#this.country.overlord = {
		#	save_event_target_as = overlord_empire
		#}

		from = {
			owner_species = {
				save_event_target_as = overlord_species
			}
		}

		from = {
			random_owned_planet = {
				limit = {
					count_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}

						}
						count > 2
					}
				}
				save_event_target_as = overlord_planet
				while = {
					count = 2
					random_owned_pop = {
						limit = {
							is_same_species = event_target:overlord_species
							can_live_on_planet = root
							OR = {
								is_pop_category = worker
								AND = {
									is_pop_category = specialist
									NOT = { has_job = colonist }
								}
							}
						}
						resettle_pop = {
							pop = this
							planet = root
						}
					}
				}

				root = {
					while = {
						count = 2
						random_owned_pop = {
							limit = {
								NOT = { is_same_species = event_target:overlord_species }
								is_sapient = yes
								can_live_on_planet = event_target:overlord_planet
							}
							resettle_pop = {
								pop = this
								planet = event_target:overlord_planet
							}
						}
					}
				}
			}
		}
	}
}

## Remove flag_domesticated_protectorate from country if no longer a subject
country_event = {
	id = domestication.6
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_protectorate
	}

	immediate = {
		remove_country_flag = flag_domesticated_protectorate
		#remove_modifier = protectorate_floret_jobs
	}
}

country_event = {
	id = domestication.7
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_domesticator_or_protectorate = yes
	}

	immediate = {
		set_variable = {
			which = floret_index
			value = 0
		}
	}
}

## gatekeeper to determine if Biorhythm Transmitter resettlement happens
country_event = {
	id = domestication.8
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_ascension_perk = ap_benefic_acquisition
		# this may end up being super resouce-intensive, and I may need to shift this to check less often
		any_owned_starbase = {
			AND = {
				has_starbase_building = biorhythm_transmitter
				owner = {
					any_neighbor_country = {
						is_domesticator_or_protectorate = no
						NOT = { is_country_type = fallen_empire }
						any_owned_planet = {
							AND = {
								num_pops > 10
								distance = {
									source = prevprevprev
									use_bypasses = no
									min_jumps = 1
									max_jumps = 4
								}
								any_owned_pop = {
								 can_hear_biorhythm = yes
								}
							}
						}
					}
				}
			}
		}
	}

	immediate = {
		random_list = {
			# default 1/25 chance of resettlement. ~1 every 2 years
			24 = {}
			1 = {
				modifier = {
					factor = 1.5
					# 3 or more transmitters
					count_owned_starbase = {
						count >= 3
						limit = {
							has_starbase_building = biorhythm_transmitter
						}
					}
				}
				modifier = {
					factor = 2
					# 6 or more transmitters
					count_owned_starbase = {
						count >= 6
						limit = {
							has_starbase_building = biorhythm_transmitter
						}
					}
				}
				country_event = { id = domestication.9 }
			}
		}
	}
}

## Pop resettlement from Biorhythm Transmitter
country_event = {
	id = domestication.9
	title = domestication.9.name
	desc =  domestication.9.desc
	picture = GFX_evt_colony_settlement
	show_sound = event_default

	is_triggered_only = yes
	hide_window = no
	location = event_target:br_resettle_newworld

	trigger = {
		is_domesticator_or_protectorate = yes
		has_ascension_perk = ap_benefic_acquisition
	}

	immediate = {
		random_neighbor_country = {
			limit = {
				is_domesticator_or_protectorate = no
				NOT = { is_country_type = fallen_empire }
				any_owned_planet = {
					AND = {
						num_pops > 10
						any_owned_pop = {
						 can_hear_biorhythm = yes
						}
						root = {
							any_owned_starbase = {
								has_starbase_building = biorhythm_transmitter
								distance = {
									source = prevprev
									use_bypasses = no
									min_jumps = 1
									max_jumps = 4
								}
							}
						}
					}
				}
			}
			save_event_target_as = br_home_empire
			random_owned_pop = {
				limit = {
					can_hear_biorhythm = yes
					planet = {
						AND = {
							num_pops > 10
							root = {
								any_owned_starbase = {
									has_starbase_building = biorhythm_transmitter
									distance = {
										source = prevprev
										use_bypasses = no
										min_jumps = 1
										max_jumps = 4
									}
								}
							}
						}
					}
				}
				weights = {
					base = 1
					modifier = {
						add = 1
						has_job_category = worker
					}
					modifier = {
						add = 2
						OR = {
							is_pop_category = slave
							is_unemployed = yes
						}
					}
					modifier = {
						factor = 0.25
						has_job_category = ruler
					}
					modifier = {
						factor = 1.5
						OR = {
							# Yes to treehuggers
							pop_has_ethic = ethic_fanatic_xenophile
							pop_has_ethic = ethic_xenophile
						}
					}
					modifier = {
						factor = 0.1
						OR = {
							# No bigots
							pop_has_ethic = ethic_fanatic_xenophobe
							pop_has_ethic = ethic_xenophobe
						}
					}
					modifier = {
						factor = 1.5
						OR = {
							# Yes to subby pervs
							has_trait = trait_deviants
							has_trait = trait_docile
						}
					}
					modifier = {
						factor = 0.5
						OR = {
							# No uptight brats
							has_trait = trait_conformists
							has_trait = trait_unruly
						}
					}
				}
				save_event_target_as = br_resettle_pop
				planet = { save_event_target_as = br_resettle_homeworld }
				set_timed_pop_flag = {
					flag = br_resettled
					years = 2
				}

				root = {
					random_owned_planet = {
						limit = {
							is_colony = yes
							event_target:br_resettle_pop = {
								can_live_on_planet = prev
							}
						}
						weights = {
							base = 1
							modifier = {
								factor = 2
								# good habitability
								habitability = { who = event_target:br_resettle_pop value >= 0.75 }
							}
							modifier = {
								factor = 0.25
								# low habitability
								habitability = { who = event_target:br_resettle_pop value <= 0.45 }
							}
							modifier = {
								factor = 1.25
								# available jobs
								free_jobs > 2
							}
							modifier = {
								factor = 0.5
								# available jobs
								free_jobs <= 0
							}
							modifier = {
								factor = 1.5
								# available housing
								free_housing > 0
							}
						}
						save_event_target_as = br_resettle_newworld
						resettle_pop = {
							pop = event_target:br_resettle_pop
							planet = this
						}
					}
				}
			}
		}
	}

	option = {
		name = domestication.9.a
		trigger = {
			always = yes
		}
		hidden_effect = {
			event_target:br_home_empire = {
				country_event = {
					id = domestication.10
					days = 25
					random = 10
					scopes = { from = root }
				}
			}
		}
	}
}

## Inform country of pop lost to Biorhythm Transmitter
country_event = {
	id = domestication.10
	title = domestication.10.name
	desc =  domestication.10.desc
	picture = GFX_evt_unknown_ships
	show_sound = event_alien_signal

	is_triggered_only = yes
	hide_window = no

	trigger = {
		always = yes
	}

	immediate = {
		from = { save_event_target_as = br_pop_stealer }
	}

	option = {
		name = domestication.10.a
		trigger = {
			always = yes
		}
		add_opinion_modifier = {
			who = from
			modifier = opinion_br_pop_stolen
		}
	}
}

## Add Haustoric Module trait to mechanical floret pops - triggered on monthly pulse
country_event = {
	id = domestication.11
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_haustoric_module
		has_policy_flag = ai_full_rights
		any_owned_pop = {
			is_robot_pop = yes
			has_job = floret
			NOT = { has_trait = trait_robot_haustoric_module }
		}
	}

	immediate = {
		every_owned_planet = {
			limit = {
				any_owned_pop = {
					is_robot_pop = yes
					has_job = floret
					NOT = {
						pop_has_trait = trait_robot_haustoric_module
					}
				}
			}
			random_owned_pop = {
				limit = {
					is_robot_pop = yes
					has_job = floret
					NOT = {
						pop_has_trait = trait_robot_haustoric_module
					}
				}
				modify_species = {
					species = this
					add_trait = trait_robot_haustoric_module
					add_traits_at_start_of_list = yes

					effect = {
						set_citizenship_type = {
							country = root
							type = citizenship_limited
							cooldown = no
						}
						set_military_service_type = {
							country = root
							type = military_service_none
							cooldown = no
						}
						set_colonization_controls = {
							country = root
							type = colonization_control_yes
							cooldown = no
						}
					}
				}
			}
		}
	}
}

## Remove Deomesticated Hivemind features from country if no longer a subject
country_event = {
	id = domestication.12
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_hive_mind
	}

	immediate = {
		remove_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}
		from = {
			remove_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}

		every_owned_planet = {
			limit = {
				has_deposit = d_hive_domestication_lab
			}
			remove_deposit = d_hive_domestication_lab
		}

		remove_country_flag = flag_domesticated_hive_mind
	}
}

## Creation of a Domesticated Hive Mind
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.13
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
			has_technology = tech_hivemind_domestication
		}
		this = {
			is_hive_empire = yes
			NOT = { has_country_flag = flag_domesticated_hive_mind }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_hive_mind
		add_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
			add_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = plantoid

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		capital_scope = {
			add_deposit = d_hive_domestication_lab
		}

	}
}

## Relocation of Hive Facility - Capital Changed
# I think this is the only event needed - no need for seconday event for conquest?
planet_event = {
	id = domestication.14
	title = domestication.14.name
	desc =  domestication.14.desc
	picture = GFX_evt_hive_mind
	show_sound = event_laboratory_sound

	is_triggered_only = yes
	hide_window = no

	trigger = {
		owner = { has_country_flag = flag_domesticated_hive_mind }
		from = {
			has_deposit = d_hive_domestication_lab
		}
	}

	immediate = {
		from = {
			remove_deposit = d_hive_domestication_lab
		}
		this = {
			add_deposit = d_hive_domestication_lab
		}
	}

	option = {
		name = WONDERFUL
		trigger = {
			always = yes
		}
	}
}

## Creation of a Domesticated Hive Mind
## mass population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.15
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			is_domesticator = yes
			has_technology = tech_hivemind_domestication
			has_technology = tech_haustoric_module
		}
		this = {
			is_hive_empire = yes
			NOT = { has_country_flag = flag_domesticated_machine_int }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_machine_int
		add_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}

		from = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
			add_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = blocky

		## Destroy all military fleets
		every_owned_ship = {
			limit = {
				is_civilian = no
				NOT = { is_ship_class = shipclass_starbase }
			}
			delete_ship = this
		}

		## hardcoded values to represent scrap from scuttling the fleet

		add_resource = { minerals = 500 }
		add_resource = { alloys = 1000 }

		event_target:domesticator_overlord = {
			add_resource = { minerals = 500 }
			add_resource = { alloys = 1000 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		capital_scope = {
			add_deposit = d_machine_domestication_lab
		}

	}
}

## Relocation of Machine Facility - Capital Changed
# I think this is the only event needed - no need for seconday event for conquest?
planet_event = {
	id = domestication.16
	title = domestication.16.name
	desc =  domestication.16.desc
	picture = GFX_evt_sapient_AI
	show_sound = event_machinery

	is_triggered_only = yes
	hide_window = no

	trigger = {
		owner = { has_country_flag = flag_domesticated_machine_int }
		from = {
			has_deposit = d_machine_domestication_lab
		}
	}

	immediate = {
		from = {
			remove_deposit = d_machine_domestication_lab
		}
		this = {
			add_deposit = d_machine_domestication_lab
		}
	}

	option = {
		name = WONDERFUL
		trigger = {
			always = yes
		}
	}
}

## Remove Domesticated Machine Int features from country if no longer a subject
country_event = {
	id = domestication.17
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_country_flag = flag_domesticated_machine_int
	}

	immediate = {
		remove_country_flag = flag_domesticated_machine_int
		remove_opinion_modifier = {
			modifier = opinion_domesticated_hivemind
			who = from
		}
		from = {
			remove_opinion_modifier = {
				modifier = opinion_our_domesticated_hivemind
				who = root
			}
		}

		every_owned_planet = {
			limit = {
				has_deposit = d_machine_domestication_lab
			}
			remove_deposit = d_machine_domestication_lab
		}
	}
}

# debug event for in case we accidentally get Affini florets
country_event = {
	id = domestication.18
	hide_window = yes

	is_triggered_only = yes
	fire_only_once = yes

	trigger = {
		always = yes
	}

	immediate = {
		every_owned_pop = {
			limit = {
				is_same_species = root.owner_species
				has_trait = trait_haustoric_implant
			}
			modify_species = {
				species = this
				remove_trait = trait_haustoric_implant
			}
		}
	}
}

## Small scale population swaps between subject and overlord
## this/root = subject, from = overlord
country_event = {
	id = domestication.19
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		this = {
			is_gestalt = no
			is_specialist_subject_type = { TYPE = domprot }
		}
	}

	immediate = {
		#set_country_flag = flag_domesticated_protectorate

		overlord = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		random_owned_planet = {
			limit = {
				count_owned_pop = {
					limit = {
						is_same_species = event_target:overlord_species
					}
					count < 2
				}
			}
			planet_event = {
				id = domestication.5
				scopes = { from = event_target:domesticator_overlord }
			}
		}


		# initialize floret index
		country_event = {	id = domestication.7 }
	}
}

# gatekeeper event for periodic Domesticated Protectorate population transfers
country_event = {
	id = domestication.21
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		this = {
			is_gestalt = no
			is_specialist_subject_type = { TYPE = domprot }
		}
	}

	# tier 1 = 0.5 per year = 1/24
	# tier 2 = 1 per year = 1/12
	# tier 3 = 2 per year = 1/6
	immediate = {
		random_list = {
			4 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_3 }
					}
					country_event = { id = domestication.19 }
				}
			}
			2 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_2 }
					}
					country_event = { id = domestication.19 }
				}
			}
			1 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_1 }
					}
					country_event = { id = domestication.19 }
				}
			}
			17 = {
				# no effect
			}
		}
	}

}

# add/remove DomProt tech bonuses for protectorate-level empires
country_event = {
	id = domestication.22
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_specialist_subject_type = { TYPE = domprot }
		has_country_flag = flag_domprot_protectorate_tech
		exists = overlord
	}

	immediate = {
		this.overlord = {
			save_event_target_as = domprot_overlord
		}
		if = {
			limit = {
				has_modifier = domprot_tech_influence
				tech_unlocked_ratio = {
					who = event_target:domprot_overlord
					ratio >= 0.5
				}
			}
			remove_modifier = domprot_tech_influence
		}
		else_if = {
			limit = {
				NOT = { has_modifier = domprot_tech_influence }
				tech_unlocked_ratio = {
					who = event_target:domprot_overlord
					ratio < 0.5
				}
			}
			add_modifier = {
				modifier = domprot_tech_influence
			}
		}
	}

}

## Level 3 of a Domesticated Protectorate
## Rename country, change primary species, etc.
## this/root = subject
country_event = {
	id = domestication.23
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		exists = root.overlord
		overlord = {
			is_domesticator = yes
		}
		this = {
			is_gestalt = no
			NOT = { has_country_flag = flag_domesticated_protectorate }
		}
	}

	immediate = {
		set_country_flag = flag_domesticated_protectorate

		overlord = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		save_event_target_as = domesticated_regime

		copy_ethos_and_authority = this.overlord

		change_government = {
			civics = random
			remove_invalid_civics = yes
		}
		while = {
			limit = {
				OR = {
					has_valid_civic = civic_slaver_guilds
					has_valid_civic = civic_warrior_culture
					has_valid_civic = civic_shared_burden
				}
			}
			change_government = {
				civics = random
				remove_invalid_civics = yes
			}
		}

		#force_add_civic = civic_domesticators
		set_name = random

		change_dominant_species = { species = event_target:overlord_species }

		set_graphical_culture = event_target:domesticator_overlord
		set_city_graphical_culture = event_target:domesticator_overlord

		change_country_flag = random
		randomize_flag_symbol = plantoid


		## Add leaders
		while = {
			count = 4
			create_leader = {
				class = scientist
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 1
			create_leader = {
				class = admiral
				species = this.owner_species
				name = random
				skill = 3
			}
		}
		while = {
			count = 2
			create_leader = {
				class = governor
				species = this.owner_species
				name = random
				skill = 3
			}
		}

		assign_leader = last_created_leader

		## Remove old leaders
		every_owned_leader = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			kill_leader = {
				fire = yes
			}
		}
		every_owned_leader = {
			leader_event = { id = domestication_leader.13 }
		}
		every_pool_leader = {
			limit = {
				NAND =
				{
					is_same_species = this.owner_species
					has_leader_flag = bloom_initialized
				}
			}
			change_species = this.owner_species
			change_leader_portrait = species
			set_name = random
			leader_event = { id = domestication_leader.13 }
		}

		every_owned_army = {
			limit = {
				NOT = { is_same_species = this.owner_species }
			}
			remove_army = yes
		}

		## Outlaw Slavery and purges
		set_policy = {
			policy = slavery
			option = slavery_not_allowed
			cooldown = yes
		}
		set_policy = {
			policy = purge
			option = purge_not_allowed
			cooldown = yes
		}

		## Set citizenship rights for non-affini in country
		every_owned_species = {
			limit = {
				NOT = { is_same_species = this.owner_species }
				OR = {
					has_citizenship_type = { country = root type = citizenship_full }
					has_citizenship_type = { country = root type = citizenship_slavery }
				}
			}
			set_citizenship_type = {
				country = root
				type = citizenship_limited
				cooldown = yes
			}
		}

		# initialize floret index
		#country_event = {	id = domestication.7 }
	}
}

planet_event = {
	id = domestication.24
	title = ancrel.4059.name
	desc = domestication.24.desc
	location = event_target:sentinels_planet
	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		room = no_video_feed_room
	}

	option = {
		name = domestication.24.a # Accept protection
		hidden_effect = { planet_event = { id = ancrel.4062 } }
		owner = { hidden_effect = { country_event = { id = domestication.27 } } }
		remove_deposit = d_archaeological_site
		add_deposit = d_sentinels
	}
}

planet_event = {
	id = domestication.25
	title = ancrel.4059.name
	desc = domestication.25.desc
	location = event_target:sentinels_planet
	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		room = no_video_feed_room
	}

	option = {
		name = domestication.25.a # Domesticated Sentinels!
		remove_deposit = d_archaeological_site
		add_deposit = d_domesticated_sentinels
	}
}

# Silent event to spawn Megafauna projects after researching the tech
country_event = {
	id = domestication.26
	picture = GFX_evt_huge_monument
	fire_only_once = yes
	show_sound = event_wind_ruins

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_megafauna_domestication
	}

	immediate = {
		# Sentinels
		if = {
			limit = {
				any_owned_planet = { has_deposit = d_sentinels }
			}
			random_owned_planet = {
				limit = { has_deposit = d_sentinels }
				save_global_event_target_as = sentinels_planet
			}
			country_event = {
				id = domestication.27
				days = 30
				random = 90
			}
		}
		# Nemma
		if = {
			limit = {
				any_owned_planet = { has_planet_flag = turtle_world_cotyledons }
			}
			random_owned_planet = {
				limit = { has_planet_flag = turtle_world_cotyledons }
				planet_event = {
					id = domestication.38
					days = 30
					random = 90
				}
			}
		}
	}
}

# Domesticating the Sentinels
country_event = {
	id = domestication.27
	title = domestication.27.name
	desc =  domestication.27.desc
	picture = GFX_evt_huge_monument
	fire_only_once = yes
	show_sound = event_wind_ruins

	is_triggered_only = yes
	hide_window = no

	trigger = {
		is_domesticator_or_protectorate = yes
		has_technology = tech_megafauna_domestication
	}

	# Create project to domesticate the Sentinels
	option = {
		name = domestication.27.a
		trigger = {
			always = yes
		}
		begin_event_chain = {
			event_chain = "domesticating_the_sentinels"
			target = ROOT
		}
		country_event = { id = domestication.28 }
	}

	# nope
	option = {
		name = domestication.27.b
		trigger = {
			always = yes
		}
	}
}

# Informs player that they need to upgrade the system's starbase
country_event = {
	id = domestication.28
	title = domestication.28.name
	desc =  domestication.28.desc
	picture = GFX_evt_megastructure_construction
	fire_only_once = yes
	show_sound = event_construction

	is_triggered_only = yes
	hide_window = no

	trigger = {
		always = yes
	}

	option = {
		name = domestication.28.a
		trigger = {
			always = yes
		}
	}

	immediate = {
		set_country_flag = flag_domesticating_the_sentinels
	}
}

# Domesticate the Sentinels, if the Starbase is good enough
country_event = {
	id = domestication.29
	title = domestication.29.name
	desc =  domestication.29.desc
	picture = GFX_evt_space_station
	fire_only_once = yes
	show_sound = event_handshake

	is_triggered_only = yes
	hide_window = no

	trigger = {
		is_domesticator_or_protectorate = yes
		has_country_flag = flag_domesticating_the_sentinels
		event_target:sentinels_planet = {
			owner = { is_same_value = prevprev }
			starbase.fleet = { fleet_power >= 20000 }
		}
	}

	option = {
		name = domestication.29.a
		trigger = {
			always = yes
		}
		event_target:sentinels_planet = {
			remove_deposit = d_sentinels
			add_deposit = d_domesticated_sentinels
			every_planet_army = {
				limit = { army_type = "sentinel_army" }
				remove_army = yes
			}
		}
		hidden_effect = {
			end_event_chain = "domesticating_the_sentinels"
			country_event = {
				id = domestication.30
				days = 1800
				random = 1080
			}
		}
	}
}

# Domesticating the Sentinels: The Evermore
country_event = {
	id = domestication.30
	title = domestication.30.name
	desc = {
 		trigger = {
 			species = { is_species_class = PLANT }
 		}
 		text = domestication.30.desc.plant
 	}
 	desc = {
 		trigger = {
			species = { NOT = { is_species_class = PLANT } }
 		}
 		text = domestication.30.desc
 	}
	picture = GFX_evt_huge_monument
	fire_only_once = yes
	show_sound = event_activating_unknown_technology

	is_triggered_only = yes
	hide_window = no

	trigger = {
		is_domesticator_or_protectorate = yes
		has_country_flag = flag_domesticating_the_sentinels
		event_target:sentinels_planet = {
			owner = { is_same_value = prevprev }
			starbase.fleet = { fleet_power >= 20000 }
		}
	}

	option = {
		name = domestication.30.a
		trigger = {
			always = yes
		}
		event_target:sentinels_planet = {
			add_modifier = {
				modifier = the_evermore_domesticated_modifier
			}
		}
		hidden_effect = {
			remove_country_flag = flag_domesticating_the_sentinels
		}
	}
	option = {
		name = domestication.30.b
		trigger = {
			always = yes
		}
		hidden_effect = {
			remove_country_flag = flag_domesticating_the_sentinels
		}
	}
}

# gatekeeper event for periodic Overlord Floret migration
country_event = {
	id = domestication.31
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_specialist_subject_type = { TYPE = domprot }
		any_owned_pop = {
			OR = {
				has_job = overlord_floret
				has_job = overlord_floret_drone
			}
		}
	}

	# tier 1 = 0.5 per year = 1/24
	# tier 2 = 1 per year = 1/12
	# tier 3 = 2 per year = 1/6
	immediate = {
		random_list = {
			4 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_3 }
					}
					country_event = { id = domestication.32 }
				}
			}
			2 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_2 }
					}
					country_event = { id = domestication.32 }
				}
			}
			1 = {
				if = {
					limit = {
						this = { has_country_flag = flag_domprot_transfer_1 }
					}
					country_event = { id = domestication.32 }
				}
			}
			89 = {
				# no effect
			}
		}
	}

}

country_event = {
	id = domestication.32
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		this = {
			is_specialist_subject_type = { TYPE = domprot }
		}
	}

	immediate = {
		#set_country_flag = flag_domesticated_protectorate

		overlord = {
			save_event_target_as = domesticator_overlord
			species = {
				save_event_target_as = overlord_species
			}
		}
		this = {
			save_event_target_as = domesticated_regime
		}

		random_owned_planet = {
			limit = {
				any_owned_pop = {
					OR = {
						has_job = overlord_floret
						has_job = overlord_floret_drone
					}
				}
			}
			planet_event = {
				id = domestication.33
				scopes = { from = event_target:domesticator_overlord }
			}
		}
	}
}

planet_event = {
	id = domestication.33
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			OR = {
				has_job = overlord_floret
				has_job = overlord_floret_drone
			}
		}
	}

	# this/root = planet
	# from = affini compact

	immediate = {
		from = {
			owner_species = {
				save_event_target_as = overlord_species
			}
		}

		from = {
			random_owned_planet = {
				limit = {
					has_available_jobs = "floret"
				}
				save_event_target_as = overlord_planet

				root = {
					random_owned_pop = {
						limit = {
							NOT = { is_same_species = event_target:overlord_species }
							OR = {
								has_job = overlord_floret
								has_job = overlord_floret_drone
							}
						}

						resettle_pop = {
							pop = this
							planet = event_target:overlord_planet
						}
						if = {
							limit = {
								pop_has_trait = trait_hive_mind
							}
							modify_species = {
								species = this
								remove_trait = trait_hive_mind
								add_trait = trait_haustoric_hive_node
								add_traits_at_start_of_list = yes

								effect = {
									set_citizenship_type = {
										country = root
										type = citizenship_limited
										cooldown = no
									}
									set_living_standard = {
										country = root
										type = living_standard_chemical_bliss
										cooldown = no
									}
									set_military_service_type = {
										country = root
										type = military_service_none
										cooldown = no
									}
									set_population_controls = {
										country = root
										type = population_control_yes
										cooldown = no
									}
									set_colonization_controls = {
										country = root
										type = colonization_control_yes
										cooldown = no
									}
								}
							}
						}
						else_if = {
							limit = {
								pop_has_trait = trait_machine_unit
							}
							modify_species = {
								species = this
								remove_trait = trait_machine_unit
								add_trait = trait_haustoric_terminal_node
								add_traits_at_start_of_list = yes

								effect = {
									set_citizenship_type = {
										country = root
										type = citizenship_limited
										cooldown = no
									}
									set_living_standard = {
										country = root
										type = living_standard_chemical_bliss
										cooldown = no
									}
									set_military_service_type = {
										country = root
										type = military_service_none
										cooldown = no
									}
									set_population_controls = {
										country = root
										type = population_control_yes
										cooldown = no
									}
									set_colonization_controls = {
										country = root
										type = colonization_control_yes
										cooldown = no
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


# Domesticating the Nanite Swarm
ship_event = {
	id = domestication.34
	title = domestication.34.name
	desc =  domestication.34.desc
	fire_only_once = yes
	hide_window = no

	picture = GFX_evt_gray_gooed_planet
	show_sound = event_laboratory_sound
	is_triggered_only = yes

	option = {
		name = domestication.34.a
		event_target:nanite_swarm_planet = {
			remove_modifier = nanite_swarm_modifier
			add_modifier = {
				modifier = domesticated_nanite_swarm_modifier
				days = -1
			}
			add_deposit = d_domesticated_nanites
		}
		owner = {
			add_monthly_resource_mult = {
				resource = physics_research
				value = @tier2researchreward
				min = @tier2researchmin
				max = @tier2researchmax
			}
			add_resource = { influence = 50 }
		}
		if = {
			limit = {
				owner_species = {
					OR = {
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = trait_pc_habitat_preference
						has_trait = trait_pc_shattered_ring_habitable_preference
					}
				}
			}
			event_target:nanite_swarm_planet = {
				change_pc = pc_gaia
				every_deposit = {
					limit = { is_blocker = yes }
					clear_blocker = yes
				}
			}
		}
		else = {
			event_target:nanite_swarm_planet = {
				change_pc = root.owner_species
				every_deposit = {
					limit = { is_blocker = yes }
					clear_blocker = yes
				}
			}
		}
	}
}

planet_event = {
	id = domestication.35
	title = "domestication.35.name"
	desc = domestication.35.desc
	picture = GFX_evt_unspeakable_horror
	show_sound = event_space_amoeba
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {#Yes investigate the Nemmas
		name = domestication.35.a
		enable_special_project = {
			name = "study_turtle_world_domestication_project"
			location = this
			owner = root
		}
	}
	option = {#Leave the Nemmas alone
		name = domestication.35.b
		remove_modifier = "turtle_world_domesticator_modifier"
		add_modifier = {
			modifier = "turtle_world_modifier_alone"
			days = -1
		}
	}
}

# domesticating the Nemma - Project complete
planet_event = {
	id = domestication.36
	title = "domestication.36.name"
	desc = {
		trigger = { owner = { has_technology = tech_megafauna_domestication } }
		text = "domestication.36.desc"
	}
	desc = {
		trigger = { owner = { NOT = { has_technology = tech_megafauna_domestication } } }
		text = "domestication.36.desc.no_tech"
	}
	picture = GFX_evt_board_meeting
	show_sound = event_administrative_work
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = domestication.36.a
		trigger = {
			owner = {
				has_technology = tech_megafauna_domestication
			}
		}
		enable_special_project = {
			name = "cotyledon_turtle_world_project"
			location = this
			owner = root
		}
	}

	option = {
		name = domestication.36.b
		trigger = {
			owner = {
				NOT = { has_technology = tech_megafauna_domestication }
			}
		}
		hidden_effect = {
			set_planet_flag = turtle_world_cotyledons
		}
		if = {
			limit = {
				owner = { has_tech_option = tech_megafauna_domestication }
			}
			owner = {
				add_tech_progress = {
					tech = tech_megafauna_domestication
					progress = 0.4
				}
			}
		}
		else_if = {
			limit = {
				owner = { has_technology = tech_haustoric_implant }
			}
			owner = {
				add_research_option = tech_megafauna_domestication
				add_tech_progress = {
					tech = tech_megafauna_domestication
					progress = 0.1
				}
			}
		}
		else = {
			owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = @tier3researchreward
					min = @tier3researchmin
					max = @tier3researchmax
				}
			}
		}
	}
}

# Nemma Domestication Complete!
planet_event = {
	id = domestication.37
	title = "domestication.37.name"
	desc = "domestication.37.desc"
	picture = GFX_evt_alien_planet
	show_sound = event_alien_nature
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = WONDERFUL
		add_deposit = d_domesticated_nemmas
	}
}

# domesticating the Nemma - Project complete
planet_event = {
	id = domestication.38
	title = "domestication.38.name"
	desc = "domestication.38.desc"
	picture = GFX_evt_board_meeting
	show_sound = event_administrative_work
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = domestication.38.a
		trigger = {
			owner = {
				has_technology = tech_megafauna_domestication
			}
		}
		enable_special_project = {
			name = "cotyledon_turtle_world_project"
			location = this
			owner = root
		}
	}
}

# domesticating the Sneks - Gatekeeper
planet_event = {
	id = domestication.39
	location = ROOT
	trackable = yes
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_list = {
			5 = {
				planet_event = {
					id = domestication.40
				}
			}
			10 = {
				planet_event = {
					id = domestication.41
				}
			}
			5 = {
				planet_event = {
					id = domestication.42
				}
			}
		}
	}
}

# domesticating the Sneks - Good ending
planet_event = {
	id = domestication.40
	title = "domestication.40.name"
	desc = {
		trigger = {
			owner = { has_technology = tech_epigenetic_triggers	}
		}
		text = "domestication.40.desc.1"
	}
	desc = {
		trigger = {
			NOT = { owner = { has_technology = tech_epigenetic_triggers	} }
		}
		text = "domestication.40.desc.2"
	}
	picture = GFX_evt_alien_cavemen
	show_sound = event_pre_ftl_civilization
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = domestication.40.a
		create_species = {
			name = NAME_Hiss
			class = PRE_REP
			portrait = pre_rep09
			homeworld = root
			sapient = no
			traits = { trait = random_presapient_trait }
			effect = { save_event_target_as = latest_presapient }
		}
		while = {
			count = 5
			create_pop = {
				species = event_target:latest_presapient
			}
		}
	}
}

# domesticating the Sneks - Medium ending
planet_event = {
	id = domestication.41
	title = "domestication.41.name"
	desc = "domestication.41.desc"
	picture = GFX_evt_animal_wildlife
	show_sound = event_alien_nature
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = domestication.41.a
		add_deposit = d_alien_pets_deposit
		if = {
			limit = {
				NOT = { owner = { has_technology = tech_epigenetic_triggers } }
			}
			owner = {
				add_research_option = tech_epigenetic_triggers
				add_tech_progress = {
					tech = tech_epigenetic_triggers
					progress = 0.25
				}
			}
		}
		else = {
			owner = {
				add_monthly_resource_mult = {
					resource = society_research
					value = @tier2researchreward
					min = @tier2researchmin
					max = @tier2researchmax
				}
			}
		}
	}
}

# domesticating the Sneks - Bad ending
planet_event = {
	id = domestication.42
	title = "domestication.42.name"
	desc = "domestication.42.desc"
	picture = GFX_evt_alien_wildlife
	show_sound = event_alien_nature
	location = ROOT
	trackable = yes

	is_triggered_only = yes

	option = {
		name = domestication.42.a
		if = {
			limit = { NOT = { root = { has_planet_modifier = pm_dangerous_wildlife } } }
			add_modifier = {
				modifier = dangerous_wildlife
			}
		}
		owner = {
			add_monthly_resource_mult = {
				resource = society_research
				value = @tier3researchreward
				min = @tier3researchmin
				max = @tier3researchmax
			}
		}
	}
}

# Protectorates break migration treaties with non-Domesticators
country_event = {
	id = domestication.43
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_domesticated_protectorate = yes
	}

	immediate = {
		every_country = {
			limit = {
				has_communications = root
				is_domesticator_or_protectorate = no
			}
			end_all_treaties_with = root
		}
	}
}

# store old protectorate name
country_event = {
	id = domestication.44
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_full_protectorate = yes
	}

	immediate = {
		event_target:floret_country = {
			set_name = {
				key = "domprot_rename_1"
				variable_string = "[root.GetName]"
			}
		}
	}
}

# revert protectorate name
country_event = {
	id = domestication.45
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_full_protectorate = yes
	}

	immediate = {
		set_name = {
			key = "domprot_rename_2"
			variable_string = "[floret_country.GetName]"
		}
	}
}

# Rescue pop from Colony Ship
# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
country_event = {
	id = domestication.46
	title = "domestication.46.name"
	desc = "domestication.46.desc"
	picture = GFX_evt_happy_reunion
	show_sound = event_faceoff_in_space
	location = FromFrom

	is_triggered_only = yes

	trigger = {
		FromFromFrom = {
			is_ship_class = shipclass_colonizer
		}
		From = {
			is_gestalt = no
		}
		any_owned_planet = {
			is_colony = yes
			root.FromFromFrom.species = {
				can_live_on_planet = prev
			}
		}
	}

	immediate = {
		FromFrom.fleet.solar_system = {
			save_event_target_as = event_loc
		}
		FromFromFrom = {
			species = {
				save_event_target_as = rescued_species
			}
		}
		random_owned_planet = {
			limit = {
				is_colony = yes
				event_target:rescued_species = {
					can_live_on_planet = prev
				}
			}
			weights = {
				base = 1
				modifier = {
					factor = 2
					# good habitability
					habitability = { who = event_target:rescued_species value >= 0.75 }
				}
				modifier = {
					factor = 0.25
					# low habitability
					habitability = { who = event_target:rescued_species value <= 0.45 }
				}
				modifier = {
					factor = 1.25
					# available jobs
					free_jobs > 2
				}
				modifier = {
					factor = 0.5
					# available jobs
					free_jobs <= 0
				}
				modifier = {
					factor = 1.5
					# available housing
					free_housing > 0
				}
			}
			save_event_target_as = resettle_newworld
			create_pop = {
				species = event_target:rescued_species
				ethos = root.From
			}
		}
	}

	option = {
		name = domestication.46.a
	}
}
