namespace = paragon_2

# On destroying enemy ship.
country_event = {
	id = paragon_2.1005
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROMFROM = { # Winning ship.
			if = {
				limit = { exists = fleet.leader }
				fleet.leader = {

					# Scholar of War / Scholar of War II
					if = {
						limit = {
							has_trait = leader_trait_xenophile_1_floret
						}
						ROOT = { # Owner of winning ship.
							add_resource = {
								unity = @trait_corsair_amt
								mult = value:hells_heart_effect
							}
						}
					}

					# Scholar of War / Scholar of War II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_scholar_of_war
								has_trait = leader_trait_scholar_of_war_2
								has_trait = leader_trait_scholar_of_war_3
							}
						}
						if = {
							limit = { has_trait = leader_trait_scholar_of_war }
							add_experience = @trait_scholar_of_war_amt
						}
						else = {
							add_experience = @trait_scholar_of_war_2_amt
						}
					}

					# Corsair / Corsair II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_corsair
								has_trait = leader_trait_corsair_2
								has_trait = leader_trait_corsair_3
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_corsair }
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}

					# Zealot / Zealot II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_par_zealot
								has_trait = leader_trait_par_zealot_2
								has_trait = leader_trait_par_zealot_3
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}

						ROOT = {
							if = {
								limit = { PREV = { has_trait = leader_trait_par_zealot } }
								add_resource = {
									unity = @trait_zealot_amt
									mult = value:calculate_ethics_divergence
								}
							}
							else = {
								add_resource = {
									unity = @trait_zealot_2_amt
									mult = value:calculate_ethics_divergence
								}
							}
							clear_variable = ethics_divergence_mult
						}
					}

					# Shipbreaker / Shipbreaker II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_shipbreaker
								has_trait = leader_trait_shipbreaker_2
								has_trait = leader_trait_shipbreaker_3
							}
							ROOT.FROM = { # Owner of losing fleet.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_shipbreaker }
							ROOT = {
								add_resource = {
									alloys = @trait_shipbreaker_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = {
								add_resource = {
									alloys = @trait_shipbreaker_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}

					# Juryrigger / Juryrigger II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_juryrigger
								has_trait = leader_trait_juryrigger_2
								has_trait = leader_trait_juryrigger_3
							}
						}
						ROOT.FROMFROM = {
							if = {
								limit = { PREV = { has_trait = leader_trait_juryrigger } }
								repair_percentage = @trait_juryrigger_amt
							}
							else = {
								repair_percentage = @trait_juryrigger_2_amt
							}
						}
					}
				}
			}
		}
	}
}

# On winning a ground battle.
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
country_event = {
	id = paragon_2.1015
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		FROMFROM = {
			every_ground_combat_attacker = {
				if = {
					limit = { exists = leader }
					leader = {
						save_event_target_as = attacking_general

						# Interrogator.
						if = {
							limit = {
								exists = from
								has_trait = leader_trait_interrogator
							}
							ROOT = {
								add_intel = {
									who = root.from
									amount = 10
								}
							}
						}
						if = {
							limit = {
								exists = from
								has_trait = leader_trait_interrogator_2
							}
							ROOT = {
								add_intel = {
									who = root.from
									amount = 20
								}
							}
						}
						if = {
							limit = {
								exists = from
								has_trait = leader_trait_interrogator_3
							}
							ROOT = {
								add_intel = {
									who = root.from
									amount = 30
								}
							}
						}

						# Industrial Espionage.
						if = {
							limit = {
								OR = {
									has_trait = leader_trait_industrial_espionage
									has_trait = leader_trait_industrial_espionage_2
									has_trait = leader_trait_industrial_espionage_3
								}
							}

							ROOT = {
								if  = {
									limit = { can_copy_random_tech_from = { who = FROM } }
									random = {
										chance = value:industrial_espionage_chance
										if = {
											limit = {
												event_target:attacking_general = {
													has_trait = leader_trait_industrial_espionage
												}
											}
											copy_random_tech_from = {
												who = FROM
												progress = 50
											}
										}
										else_if = {
											limit = {
												event_target:attacking_general = {
													OR = {
														has_trait = leader_trait_industrial_espionage_2
														has_trait = leader_trait_industrial_espionage_3
													}
												}
											}
											copy_random_tech_from = {
												who = FROM
												progress = value:industrial_espionage_chance
											}
										}
									}
								}
							}
						}

						# Pilferer.
						if = {
							limit = {
								has_trait = leader_trait_pilferer
							}
							ROOT = {
								# Basic Resources - Regular Districts
								add_resource = {
									energy = 100
									mult = FROMFROM.value:count_districts|TYPE|generator|
								}
								add_resource = {
									minerals = 100
									mult = FROMFROM.value:count_districts|TYPE|mining|
								}
								add_resource = {
									food = 100
									mult = FROMFROM.value:count_districts|TYPE|farming|
								}
								# Basic Resources - Uncapped Districts
								add_resource = {
									energy = 100
									mult = FROMFROM.value:count_districts|TYPE|generator_uncapped|
								}
								add_resource = {
									minerals = 100
									mult = FROMFROM.value:count_districts|TYPE|mining_uncapped|
								}
								add_resource = {
									food = 100
									mult = FROMFROM.value:count_districts|TYPE|farming_uncapped|
								}
								# Advanced Resources - Regular Districts
								add_resource = {
									alloys = 50
									mult = FROMFROM.value:count_districts|TYPE|industrial|
								}
								add_resource = {
									consumer_goods = 50
									mult = FROMFROM.value:count_districts|TYPE|industrial|
								}
								# Basic Resources - Habitat Districts
								add_resource = {
									energy = 100
										mult = FROMFROM.value:count_districts|TYPE|hab_energy|
									}
								add_resource = {
									minerals = 100
									mult = FROMFROM.value:count_districts|TYPE|hab_mining|
								}
								# Advanced Resources - Habitat Districts
								add_resource = {
									alloys = 50
									mult = FROMFROM.value:count_districts|TYPE|hab_industrial|
								}
								add_resource = {
									consumer_goods = 50
									mult = FROMFROM.value:count_districts|TYPE|hab_industrial|
								}
								# Research - Habitat Districts
								add_resource = {
									physics_research = 25
									society_research = 25
									engineering_research = 25
									mult = FROMFROM.value:count_districts|TYPE|hab_science|
								}
								# Advanced Resources - Ecu Districts
								add_resource = {
									alloys = 50
									mult = FROMFROM.value:count_ecu_districts_equiv|TYPE|arcology_arms_industry|
								}
								add_resource = {
									consumer_goods = 50
									mult = FROMFROM.value:count_ecu_districts_equiv|TYPE|arcology_civilian_industry|
								}
								# Basic Resources - Ringworld Districts
								add_resource = {
									energy = 100
									mult = FROMFROM.value:count_ringworld_districts_equiv|TYPE|rw_generator|
								}
								add_resource = {
									food = 100
									mult = FROMFROM.value:count_ringworld_districts_equiv|TYPE|rw_farming|
								}
								# Advanced Resources - Ringworld Districts
								add_resource = {
									alloys = 50
									mult = FROMFROM.value:count_ringworld_districts_equiv|TYPE|rw_industrial|
								}
								add_resource = {
									consumer_goods = 50
									mult = FROMFROM.value:count_ringworld_districts_equiv|TYPE|rw_industrial|
								}
								# Research - Ringworld Districts
								add_resource = {
									physics_research = 25
									society_research = 25
									engineering_research = 25
									mult = FROMFROM.value:count_ringworld_districts_equiv|TYPE|rw_science|
								}
							}
						}
            # Pilferer.
						if = {
							limit = {
								has_trait = leader_trait_militarist_2_floret
							}
							ROOT = {
								# Basic Resources - Regular Districts
								add_resource = {
									unity = 100
									mult = FROMFROM.value:count_districts_all
								}
							}
						}
					}
				}
			}
		}
	}
}
